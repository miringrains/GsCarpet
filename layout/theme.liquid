<!doctype html>
<html lang="{{ request.locale.iso_code }}">
  <head>
    {% # Inlined CSS Variables %}
    {% render 'css-variables' %}

    {% # Load and preload the critical CSS %}
    {{ 'critical.css' | asset_url | stylesheet_tag: preload: true }}
    
    {% # Load theme base styles %}
    {{ 'theme-base.css' | asset_url | stylesheet_tag }}
    
    {% # Load Restoration Hardware style theme %}
    {{ 'restoration-hardware-theme.css' | asset_url | stylesheet_tag }}
    
    {% # Mobile UX improvements %}
    {{ 'mobile-improvements.css' | asset_url | stylesheet_tag }}

    {% # Social, title, etc. %}
    {% render 'meta-tags' %}

    {{ content_for_header }}
  </head>

  <body>
    {% sections 'header-group' %}

    {{ content_for_layout }}

    {% sections 'footer-group' %}
    
    {% # JavaScript files %}
    {{ 'alpine-collapse.min.js' | asset_url | script_tag }}
    {{ 'alpine.min.js' | asset_url | script_tag }}
    <script>
      // Ensure Alpine starts with stores properly initialized
      document.addEventListener('alpine:init', () => {
        // Initialize cart store if not already done
        if (!Alpine.store('cart')) {
          Alpine.store('cart', {
            isOpen: false,
            updating: false,
            itemCount: {{ cart.item_count | default: 0 }},
            
            openDrawer() {
              this.isOpen = true;
              document.body.style.overflow = 'hidden';
            },
            
            closeDrawer() {
              this.isOpen = false;
              document.body.style.overflow = '';
            },
            
            open() {
              this.openDrawer();
            },
            
            close() {
              this.closeDrawer();
            }
          });
        }
        
        // Initialize quick view store if not already done
        if (!Alpine.store('quickView')) {
          Alpine.store('quickView', {
            isOpen: false,
            productHandle: null,

            show(productHandle) {
              this.productHandle = productHandle;
              this.isOpen = true;
              document.body.style.overflow = 'hidden';
            },

            close() {
              this.isOpen = false;
              document.body.style.overflow = '';
              setTimeout(() => {
                this.productHandle = null;
              }, 300); // Wait for close animation
            }
          });
        }

        // Define cartDrawer component
        Alpine.data('cartDrawer', () => ({
          items: [],
          
          async init() {
            // Load cart data when drawer opens
            this.$watch('$store.cart.isOpen', async (open) => {
              if (open) {
                await this.loadCart();
              }
            });
          },
          
          async loadCart() {
            try {
              const response = await fetch('/cart.js');
              const cart = await response.json();
              this.items = cart.items || [];
              this.$store.cart.itemCount = cart.item_count || 0;
            } catch (error) {
              console.error('Error loading cart:', error);
            }
          },
          
          async updateQuantity(lineIndex, quantity) {
            this.$store.cart.updating = true;
            try {
              const response = await fetch('/cart/change.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  line: lineIndex,
                  quantity: quantity
                })
              });
              await this.loadCart();
            } catch (error) {
              console.error('Error updating cart:', error);
            } finally {
              this.$store.cart.updating = false;
            }
          },
          
          async removeItem(lineIndex) {
            await this.updateQuantity(lineIndex, 0);
          }
        }));
        
        // Define quickViewModal component
        Alpine.data('quickViewModal', () => ({
          product: null,
          selectedVariant: null,
          loading: false,
          selectedImageIndex: 0,

          async init() {
            this.$watch('$store.quickView.isOpen', async (open) => {
              if (open && this.$store.quickView.productHandle) {
                await this.loadProduct(this.$store.quickView.productHandle);
              } else if (!open) {
                this.product = null;
                this.selectedImageIndex = 0;
              }
            });
          },

          async loadProduct(productHandle) {
            this.loading = true;
            try {
              const response = await fetch(`/products/${productHandle}.js`);
              const productData = await response.json();
              
              // Format the product data
              this.product = {
                id: productData.id,
                title: productData.title,
                handle: productData.handle,
                price: productData.price,
                compare_at_price: productData.compare_at_price,
                description: productData.description,
                featured_image: productData.featured_image,
                images: productData.images || [],
                url: productData.url,
                available: productData.available,
                material: productData.tags?.find(tag => tag.includes('Material:'))?.replace('Material:', '').trim() || null
              };
              
              this.selectedVariant = productData.variants?.[0];
            } catch (error) {
              console.error('Error loading product:', error);
              this.$store.quickView.close();
            } finally {
              this.loading = false;
            }
          },

          selectVariant(variantId) {
            this.selectedVariant = this.product.variants.find(v => v.id === variantId);
          },

          async addToCart() {
            if (!this.selectedVariant) return;

            try {
              await fetch('/cart/add.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  id: this.selectedVariant.id,
                  quantity: 1
                })
              });
              
              // Refresh cart
              window.location.reload();
            } catch (error) {
              console.error('Error adding to cart:', error);
            }
          }
        }));

        // Define productContent component for product pages
        Alpine.data('productContent', () => ({
          selectedVariant: null,
          quantity: 1,
          currentImageIndex: 0,

          init() {
            // Initialize with first available variant
            if (window.productData && window.productData.variants.length > 0) {
              this.selectedVariant = window.productData.variants[0];
            }
          },

          selectVariant(variantId) {
            this.selectedVariant = window.productData.variants.find(v => v.id === variantId);
          },

          updateQuantity(change) {
            this.quantity = Math.max(1, this.quantity + change);
          },

          async addToCart() {
            if (!this.selectedVariant) return;

            try {
              await fetch('/cart/add.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  id: this.selectedVariant.id,
                  quantity: this.quantity
                })
              });
              
              // Open cart drawer
              Alpine.store('cart').openDrawer();
            } catch (error) {
              console.error('Error adding to cart:', error);
            }
          }
        }))
      });
    </script>
    <script src="{{ 'animations.js' | asset_url }}" defer></script>
    <script src="{{ 'custom-calculator.js' | asset_url }}" defer></script>
    
    {% # Quick View Modal %}
    {% render 'quick-view-modal' %}
    
    {% # Cart Drawer %}
    {% render 'cart-drawer' %}
  </body>
</html>
<!-- Sync test Thu Oct 16 10:14:23 EDT 2025 -->
