{% comment %}
  Premium Size Calculator
  Real-time custom rug size calculator with visual preview
  
  Parameters:
  - product: The product object
  - base_price: Base price per square foot
{% endcomment %}

{% assign base_price_per_sqft = product.metafields.custom.price_per_sqft | default: 25 %}

<div class="size-calculator" x-data="advancedSizeCalculator()" x-init="init()">
  <div class="size-calculator__container">
    
    <!-- Size Selection Tabs -->
    <div class="size-calculator__tabs">
      <button 
        class="size-calculator__tab"
        :class="{ 'size-calculator__tab--active': sizeMode === 'standard' }"
        @click="sizeMode = 'standard'"
      >
        Standard Sizes
      </button>
      <button 
        class="size-calculator__tab"
        :class="{ 'size-calculator__tab--active': sizeMode === 'custom' }"
        @click="sizeMode = 'custom'"
      >
        Custom Size
      </button>
    </div>

    <!-- Standard Sizes -->
    <div 
      class="size-calculator__standard"
      x-show="sizeMode === 'standard'"
      x-transition
    >
      <div class="size-calculator__standard-grid">
        {% assign standard_sizes = '4x6,5x7,6x9,8x10,9x12,10x14,12x15' | split: ',' %}
        {% for size in standard_sizes %}
          {% assign dimensions = size | split: 'x' %}
          {% assign width = dimensions[0] | times: 1.0 %}
          {% assign length = dimensions[1] | times: 1.0 %}
          {% assign area = width | times: length %}
          {% assign price = area | times: base_price_per_sqft %}
          
          <label class="size-option">
            <input 
              type="radio" 
              name="standard_size"
              value="{{ size }}"
              @change="selectStandardSize({{ width }}, {{ length }})"
              :checked="width == {{ width }} && length == {{ length }}"
            >
            <div class="size-option__content">
              <div class="size-option__visual">
                <div 
                  class="size-option__shape"
                  :style="`width: ${{{ width }} * 10}px; height: ${{{ length }} * 10}px;`"
                ></div>
              </div>
              <div class="size-option__info">
                <span class="size-option__dimensions">{{ size }} ft</span>
                <span class="size-option__price">{{ price | money }}</span>
              </div>
            </div>
          </label>
        {% endfor %}
      </div>
    </div>

    <!-- Custom Size -->
    <div 
      class="size-calculator__custom"
      x-show="sizeMode === 'custom'"
      x-transition
    >
      <!-- Shape Selection -->
      <div class="size-calculator__shape-selector">
        <h4 class="size-calculator__label">Select Shape</h4>
        <div class="shape-selector">
          <label class="shape-option">
            <input 
              type="radio" 
              name="shape" 
              value="rectangle"
              x-model="shape"
            >
            <div class="shape-option__icon">
              <svg viewBox="0 0 40 30" fill="currentColor">
                <rect width="40" height="30" rx="2"/>
              </svg>
              <span>Rectangle</span>
            </div>
          </label>
          
          <label class="shape-option">
            <input 
              type="radio" 
              name="shape" 
              value="square"
              x-model="shape"
            >
            <div class="shape-option__icon">
              <svg viewBox="0 0 40 40" fill="currentColor">
                <rect width="40" height="40" rx="2"/>
              </svg>
              <span>Square</span>
            </div>
          </label>
          
          <label class="shape-option">
            <input 
              type="radio" 
              name="shape" 
              value="round"
              x-model="shape"
            >
            <div class="shape-option__icon">
              <svg viewBox="0 0 40 40" fill="currentColor">
                <circle cx="20" cy="20" r="20"/>
              </svg>
              <span>Round</span>
            </div>
          </label>
          
          <label class="shape-option">
            <input 
              type="radio" 
              name="shape" 
              value="oval"
              x-model="shape"
            >
            <div class="shape-option__icon">
              <svg viewBox="0 0 40 30" fill="currentColor">
                <ellipse cx="20" cy="15" rx="20" ry="15"/>
              </svg>
              <span>Oval</span>
            </div>
          </label>
          
          <label class="shape-option">
            <input 
              type="radio" 
              name="shape" 
              value="runner"
              x-model="shape"
            >
            <div class="shape-option__icon">
              <svg viewBox="0 0 40 15" fill="currentColor">
                <rect width="40" height="15" rx="2"/>
              </svg>
              <span>Runner</span>
            </div>
          </label>
        </div>
      </div>

      <!-- Dimension Inputs -->
      <div class="size-calculator__dimensions">
        <h4 class="size-calculator__label">Enter Dimensions</h4>
        
        <div class="dimension-inputs">
          <div class="dimension-input" x-show="shape !== 'square' && shape !== 'round'">
            <label for="width">Width</label>
            <div class="dimension-input__group">
              <input 
                type="number" 
                id="width"
                x-model="width"
                min="1"
                max="30"
                step="0.5"
                class="form-input"
                @input="calculatePrice()"
              >
              <select x-model="unit" @change="convertUnits()" class="form-select dimension-input__unit">
                <option value="ft">ft</option>
                <option value="in">in</option>
                <option value="cm">cm</option>
              </select>
            </div>
          </div>
          
          <div class="dimension-input" x-show="shape === 'square' || shape === 'round'">
            <label for="diameter" x-show="shape === 'round'">Diameter</label>
            <label for="size" x-show="shape === 'square'">Size</label>
            <div class="dimension-input__group">
              <input 
                type="number" 
                id="diameter"
                x-model="width"
                min="1"
                max="30"
                step="0.5"
                class="form-input"
                @input="length = width; calculatePrice()"
              >
              <select x-model="unit" @change="convertUnits()" class="form-select dimension-input__unit">
                <option value="ft">ft</option>
                <option value="in">in</option>
                <option value="cm">cm</option>
              </select>
            </div>
          </div>
          
          <div class="dimension-input" x-show="shape !== 'square' && shape !== 'round'">
            <label for="length">Length</label>
            <div class="dimension-input__group">
              <input 
                type="number" 
                id="length"
                x-model="length"
                min="1"
                max="30"
                step="0.5"
                class="form-input"
                @input="calculatePrice()"
              >
              <span class="dimension-input__unit-text" x-text="unit"></span>
            </div>
          </div>
        </div>
        
        <!-- Size Recommendations -->
        <div class="size-recommendations" x-show="showRecommendations">
          <h5 class="size-recommendations__title">Size Guide</h5>
          <div class="size-recommendations__list">
            <button 
              class="size-recommendation"
              @click="selectRecommendation('living', 8, 10)"
            >
              <span class="size-recommendation__room">Living Room</span>
              <span class="size-recommendation__size">8x10 ft</span>
            </button>
            <button 
              class="size-recommendation"
              @click="selectRecommendation('dining', 9, 12)"
            >
              <span class="size-recommendation__room">Dining Room</span>
              <span class="size-recommendation__size">9x12 ft</span>
            </button>
            <button 
              class="size-recommendation"
              @click="selectRecommendation('bedroom', 6, 9)"
            >
              <span class="size-recommendation__room">Bedroom</span>
              <span class="size-recommendation__size">6x9 ft</span>
            </button>
            <button 
              class="size-recommendation"
              @click="selectRecommendation('hallway', 3, 10)"
            >
              <span class="size-recommendation__room">Hallway</span>
              <span class="size-recommendation__size">3x10 ft</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Visual Preview -->
    <div class="size-calculator__preview">
      <h4 class="size-calculator__label">Visual Preview</h4>
      
      <div class="preview-container">
        <div class="preview-room">
          <!-- Room Background -->
          <div class="preview-room__furniture">
            <div class="preview-room__sofa"></div>
            <div class="preview-room__table"></div>
            <div class="preview-room__chair preview-room__chair--1"></div>
            <div class="preview-room__chair preview-room__chair--2"></div>
          </div>
          
          <!-- Rug Preview -->
          <div 
            class="preview-rug"
            :class="`preview-rug--${shape}`"
            :style="rugPreviewStyle"
          >
            <span class="preview-rug__size" x-text="sizeText"></span>
          </div>
        </div>
        
        <div class="preview-scale">
          <span class="preview-scale__label">Scale: 1 ft = 10 px</span>
        </div>
      </div>
    </div>

    <!-- Price Summary -->
    <div class="size-calculator__summary">
      <div class="price-summary">
        <div class="price-summary__row">
          <span class="price-summary__label">Size:</span>
          <span class="price-summary__value" x-text="sizeText"></span>
        </div>
        <div class="price-summary__row">
          <span class="price-summary__label">Area:</span>
          <span class="price-summary__value" x-text="`${area.toFixed(1)} sq ft`"></span>
        </div>
        <div class="price-summary__row price-summary__row--total">
          <span class="price-summary__label">Total Price:</span>
          <span class="price-summary__value price-summary__price" x-text="formatPrice(totalPrice)"></span>
        </div>
      </div>
      
      <!-- Add to Cart -->
      <form action="/cart/add" method="post" @submit.prevent="addToCart()">
        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
        <input type="hidden" name="properties[Shape]" :value="shape">
        <input type="hidden" name="properties[Width]" :value="`${width} ${unit}`">
        <input type="hidden" name="properties[Length]" :value="`${length} ${unit}`" x-show="shape !== 'square' && shape !== 'round'">
        <input type="hidden" name="properties[Size]" :value="sizeText">
        <input type="hidden" name="properties[Custom Price]" :value="formatPrice(totalPrice)">
        
        <button type="submit" class="btn btn--primary btn--large size-calculator__add-to-cart">
          Add to Cart - <span x-text="formatPrice(totalPrice)"></span>
        </button>
      </form>
    </div>
  </div>
</div>

<script>
  function sizeCalculator() {
    return {
      sizeMode: 'standard',
      shape: 'rectangle',
      width: 8,
      length: 10,
      unit: 'ft',
      basePrice: {{ base_price_per_sqft }},
      showRecommendations: true,
      
      get area() {
        if (this.unit !== 'ft') {
          // Convert to feet for calculation
          const widthInFt = this.convertToFeet(this.width, this.unit);
          const lengthInFt = this.convertToFeet(this.length, this.unit);
          
          if (this.shape === 'round') {
            return Math.PI * Math.pow(widthInFt / 2, 2);
          } else if (this.shape === 'oval') {
            return Math.PI * (widthInFt / 2) * (lengthInFt / 2);
          }
          return widthInFt * lengthInFt;
        }
        
        if (this.shape === 'round') {
          return Math.PI * Math.pow(this.width / 2, 2);
        } else if (this.shape === 'oval') {
          return Math.PI * (this.width / 2) * (this.length / 2);
        }
        return this.width * this.length;
      },
      
      get totalPrice() {
        return this.area * this.basePrice;
      },
      
      get sizeText() {
        if (this.shape === 'square' || this.shape === 'round') {
          return `${this.width} ${this.unit}`;
        }
        return `${this.width} x ${this.length} ${this.unit}`;
      },
      
      get rugPreviewStyle() {
        const scale = 10; // 1 ft = 10px
        let widthPx = this.width * scale;
        let heightPx = this.length * scale;
        
        if (this.unit === 'in') {
          widthPx = (this.width / 12) * scale;
          heightPx = (this.length / 12) * scale;
        } else if (this.unit === 'cm') {
          widthPx = (this.width / 30.48) * scale;
          heightPx = (this.length / 30.48) * scale;
        }
        
        // Limit preview size
        const maxSize = 200;
        if (widthPx > maxSize || heightPx > maxSize) {
          const ratio = Math.min(maxSize / widthPx, maxSize / heightPx);
          widthPx *= ratio;
          heightPx *= ratio;
        }
        
        return `width: ${widthPx}px; height: ${heightPx}px;`;
      },
      
      init() {
        this.calculatePrice();
      },
      
      calculatePrice() {
        // Price calculation handled by computed properties
      },
      
      formatPrice(price) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD'
        }).format(price);
      },
      
      selectStandardSize(width, length) {
        this.width = width;
        this.length = length;
        this.shape = 'rectangle';
        this.unit = 'ft';
        this.calculatePrice();
      },
      
      selectRecommendation(room, width, length) {
        this.width = width;
        this.length = length;
        this.calculatePrice();
      },
      
      convertToFeet(value, fromUnit) {
        if (fromUnit === 'in') return value / 12;
        if (fromUnit === 'cm') return value / 30.48;
        return value;
      },
      
      convertUnits() {
        // Handle unit conversion
        this.calculatePrice();
      },
      
      async addToCart() {
        const formData = new FormData();
        formData.append('id', '{{ product.selected_or_first_available_variant.id }}');
        formData.append('quantity', '1');
        formData.append('properties[Shape]', this.shape);
        formData.append('properties[Width]', `${this.width} ${this.unit}`);
        if (this.shape !== 'square' && this.shape !== 'round') {
          formData.append('properties[Length]', `${this.length} ${this.unit}`);
        }
        formData.append('properties[Size]', this.sizeText);
        formData.append('properties[Area]', `${this.area.toFixed(1)} sq ft`);
        formData.append('properties[Custom Price]', this.formatPrice(this.totalPrice));
        
        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            body: formData
          });
          
          if (response.ok) {
            // Open cart drawer
            Alpine.store('cart').openDrawer();
            // Refresh page to update cart count
            window.location.reload();
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
        }
      }
    }
  }
</script>

<style>
  /* Size Calculator Styles */
  .size-calculator {
    max-width: 1200px;
    margin: 0 auto;
  }

  .size-calculator__container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-xl);
  }

  @media (max-width: 768px) {
    .size-calculator__container {
      grid-template-columns: 1fr;
    }
  }

  /* Tabs */
  .size-calculator__tabs {
    display: flex;
    gap: var(--space-sm);
    margin-bottom: var(--space-lg);
    grid-column: 1 / -1;
  }

  .size-calculator__tab {
    flex: 1;
    padding: var(--space-sm) var(--space-md);
    font-size: 1rem;
    font-weight: 500;
    background-color: var(--color-background-subtle);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: var(--transition-base);
  }

  .size-calculator__tab--active {
    background-color: var(--color-accent);
    color: var(--color-text-inverse);
    border-color: var(--color-accent);
  }

  /* Standard Sizes */
  .size-calculator__standard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
    gap: var(--space-sm);
  }

  .size-option {
    position: relative;
    cursor: pointer;
  }

  .size-option input {
    position: absolute;
    opacity: 0;
  }

  .size-option__content {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: var(--space-md);
    background-color: var(--color-surface);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-lg);
    transition: var(--transition-base);
  }

  .size-option input:checked + .size-option__content {
    border-color: var(--color-accent);
    box-shadow: var(--shadow-md);
  }

  .size-option__visual {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 80px;
    height: 80px;
    margin-bottom: var(--space-sm);
  }

  .size-option__shape {
    background-color: var(--color-accent-light);
    border: 1px solid var(--color-border);
  }

  .size-option__dimensions {
    font-weight: 600;
    margin-bottom: var(--space-xs);
  }

  .size-option__price {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
  }

  /* Shape Selector */
  .shape-selector {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    gap: var(--space-sm);
    margin-bottom: var(--space-lg);
  }

  .shape-option {
    position: relative;
    cursor: pointer;
  }

  .shape-option input {
    position: absolute;
    opacity: 0;
  }

  .shape-option__icon {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-sm);
    background-color: var(--color-surface);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-md);
    transition: var(--transition-base);
  }

  .shape-option input:checked + .shape-option__icon {
    background-color: var(--color-accent-light);
    border-color: var(--color-accent);
  }

  .shape-option__icon svg {
    width: 40px;
    height: 40px;
    color: var(--color-text-secondary);
  }

  .shape-option__icon span {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
  }

  /* Dimension Inputs */
  .dimension-inputs {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-md);
    margin-bottom: var(--space-lg);
  }

  .dimension-input label {
    display: block;
    margin-bottom: var(--space-xs);
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text-secondary);
  }

  .dimension-input__group {
    display: flex;
    gap: var(--space-xs);
  }

  .dimension-input__unit {
    width: 60px;
  }

  .dimension-input__unit-text {
    display: flex;
    align-items: center;
    padding: 0 var(--space-sm);
    background-color: var(--color-background-subtle);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    font-size: 0.875rem;
  }

  /* Size Recommendations */
  .size-recommendations {
    background-color: var(--color-background-subtle);
    border-radius: var(--radius-lg);
    padding: var(--space-md);
  }

  .size-recommendations__title {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: var(--space-sm);
  }

  .size-recommendations__list {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-xs);
  }

  .size-recommendation {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    padding: var(--space-sm);
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: var(--transition-base);
  }

  .size-recommendation:hover {
    background-color: var(--color-accent-light);
    border-color: var(--color-accent);
  }

  .size-recommendation__room {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text-primary);
  }

  .size-recommendation__size {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
  }

  /* Preview */
  .size-calculator__preview {
    grid-column: 2;
    grid-row: 2 / 4;
  }

  @media (max-width: 768px) {
    .size-calculator__preview {
      grid-column: 1;
      grid-row: auto;
    }
  }

  .size-calculator__label {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: var(--space-md);
    color: var(--color-text-primary);
  }

  .preview-container {
    background-color: var(--color-background-subtle);
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
  }

  .preview-room {
    position: relative;
    width: 100%;
    height: 300px;
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    overflow: hidden;
  }

  .preview-room__furniture {
    position: absolute;
    inset: 0;
    opacity: 0.2;
  }

  .preview-room__sofa {
    position: absolute;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    width: 120px;
    height: 40px;
    background-color: var(--color-text-secondary);
    border-radius: var(--radius-sm);
  }

  .preview-room__table {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80px;
    height: 50px;
    background-color: var(--color-text-tertiary);
    border-radius: var(--radius-sm);
  }

  .preview-room__chair {
    position: absolute;
    width: 30px;
    height: 30px;
    background-color: var(--color-text-secondary);
    border-radius: var(--radius-sm);
  }

  .preview-room__chair--1 {
    top: 50%;
    left: 30%;
    transform: translate(-50%, -50%);
  }

  .preview-room__chair--2 {
    top: 50%;
    right: 30%;
    transform: translate(50%, -50%);
  }

  .preview-rug {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: var(--color-accent-light);
    border: 2px solid var(--color-accent);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: var(--transition-base);
  }

  .preview-rug--rectangle,
  .preview-rug--square {
    border-radius: var(--radius-sm);
  }

  .preview-rug--round {
    border-radius: 50%;
  }

  .preview-rug--oval {
    border-radius: 50%;
  }

  .preview-rug--runner {
    border-radius: var(--radius-sm);
  }

  .preview-rug__size {
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--color-text-primary);
    background-color: var(--color-surface);
    padding: 0.25rem 0.5rem;
    border-radius: var(--radius-sm);
    box-shadow: var(--shadow-sm);
  }

  .preview-scale {
    margin-top: var(--space-sm);
    text-align: center;
  }

  .preview-scale__label {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
  }

  /* Price Summary */
  .size-calculator__summary {
    grid-column: 1 / -1;
    margin-top: var(--space-lg);
  }

  .price-summary {
    background-color: var(--color-background-subtle);
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    margin-bottom: var(--space-md);
  }

  .price-summary__row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-sm) 0;
  }

  .price-summary__row:not(:last-child) {
    border-bottom: 1px solid var(--color-border);
  }

  .price-summary__row--total {
    padding-top: var(--space-md);
    border-top: 2px solid var(--color-border);
    margin-top: var(--space-sm);
  }

  .price-summary__label {
    font-size: 1rem;
    color: var(--color-text-secondary);
  }

  .price-summary__row--total .price-summary__label {
    font-weight: 600;
    color: var(--color-text-primary);
  }

  .price-summary__value {
    font-size: 1rem;
    font-weight: 500;
    color: var(--color-text-primary);
  }

  .price-summary__price {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-accent);
  }

  .size-calculator__add-to-cart {
    width: 100%;
  }
</style>
