{% comment %}
  Filter Group Component
  Renders different types of filters for the collection page
  
  Parameters:
  - title: The title of the filter group
  - type: The type of filter (size, color, material, price, shape, features)
  - options: Comma-separated list of options (for non-price filters)
  - min: Minimum price (for price filter)
  - max: Maximum price (for price filter)
{% endcomment %}

<div class="filter-group" x-data="{ expanded: true }">
  <button 
    class="filter-group__header"
    @click="expanded = !expanded"
    :aria-expanded="expanded"
  >
    <span class="filter-group__title">{{ title }}</span>
    <svg 
      class="filter-group__arrow" 
      :class="{ 'rotate-180': !expanded }"
      width="12" 
      height="8" 
      viewBox="0 0 12 8" 
      fill="none"
    >
      <path d="M1 1.5L6 6.5L11 1.5" stroke="currentColor" stroke-width="1.5"/>
    </svg>
  </button>
  
  <div 
    class="filter-group__content"
    x-show="expanded"
    x-collapse
  >
    {% case type %}
      {% when 'size' %}
        <div class="filter-group__options filter-group__options--size">
          {% assign size_list = options | split: ',' %}
          {% for size in size_list %}
            <label class="filter-checkbox">
              <input 
                type="checkbox" 
                name="filter_size"
                value="{{ size | strip }}"
                @change="updateFilter('size', '{{ size | strip }}', $event.target.checked)"
              >
              <span class="filter-checkbox__label">{{ size | strip }}</span>
            </label>
          {% endfor %}
          
          <!-- Custom Size Input -->
          <div class="filter-custom-size" x-show="filters.size.includes('Custom')">
            <div class="filter-custom-size__inputs">
              <input 
                type="number" 
                placeholder="Width"
                class="form-input filter-custom-size__input"
                min="1"
                @input="updateCustomSize('width', $event.target.value)"
              >
              <span class="filter-custom-size__separator">Ã—</span>
              <input 
                type="number" 
                placeholder="Length"
                class="form-input filter-custom-size__input"
                min="1"
                @input="updateCustomSize('length', $event.target.value)"
              >
            </div>
            <select class="form-select filter-custom-size__unit">
              <option value="ft">ft</option>
              <option value="in">in</option>
              <option value="cm">cm</option>
            </select>
          </div>
        </div>
        
      {% when 'color' %}
        <div class="filter-group__options filter-group__options--color">
          {% assign color_list = options | split: ',' %}
          {% for color in color_list %}
            {% assign color_value = color | strip | downcase %}
            <label class="filter-color">
              <input 
                type="checkbox" 
                name="filter_color"
                value="{{ color | strip }}"
                @change="updateFilter('color', '{{ color | strip }}', $event.target.checked)"
              >
              <span 
                class="filter-color__swatch"
                style="background-color: {{ color_value }};"
                title="{{ color | strip }}"
              >
                {% if color_value == 'white' or color_value == 'ivory' %}
                  <span class="filter-color__border"></span>
                {% endif %}
                {% if color_value == 'multi' %}
                  <span class="filter-color__multi"></span>
                {% endif %}
              </span>
            </label>
          {% endfor %}
        </div>
        
      {% when 'material' %}
        <div class="filter-group__options">
          {% assign material_list = options | split: ',' %}
          {% for material in material_list %}
            <label class="filter-checkbox">
              <input 
                type="checkbox" 
                name="filter_material"
                value="{{ material | strip }}"
                @change="updateFilter('material', '{{ material | strip }}', $event.target.checked)"
              >
              <span class="filter-checkbox__label">{{ material | strip }}</span>
            </label>
          {% endfor %}
        </div>
        
      {% when 'price' %}
        <div class="filter-group__options filter-group__options--price">
          <div class="filter-price">
            <div class="filter-price__inputs">
              <div class="filter-price__input-group">
                <span class="filter-price__currency">$</span>
                <input 
                  type="number" 
                  placeholder="Min"
                  class="form-input filter-price__input"
                  min="{{ min }}"
                  max="{{ max }}"
                  @input="updatePriceFilter('min', $event.target.value)"
                >
              </div>
              <span class="filter-price__separator">to</span>
              <div class="filter-price__input-group">
                <span class="filter-price__currency">$</span>
                <input 
                  type="number" 
                  placeholder="Max"
                  class="form-input filter-price__input"
                  min="{{ min }}"
                  max="{{ max }}"
                  @input="updatePriceFilter('max', $event.target.value)"
                >
              </div>
            </div>
            
            <!-- Price Range Slider -->
            <div class="filter-price__slider">
              <div class="filter-price__track"></div>
              <div 
                class="filter-price__range"
                :style="`left: ${priceRangeLeft}%; width: ${priceRangeWidth}%`"
              ></div>
              <input 
                type="range" 
                class="filter-price__range-input"
                min="{{ min }}"
                max="{{ max }}"
                :value="filters.price.min || {{ min }}"
                @input="updatePriceFilter('min', $event.target.value)"
              >
              <input 
                type="range" 
                class="filter-price__range-input"
                min="{{ min }}"
                max="{{ max }}"
                :value="filters.price.max || {{ max }}"
                @input="updatePriceFilter('max', $event.target.value)"
              >
            </div>
          </div>
        </div>
        
      {% when 'shape' %}
        <div class="filter-group__options filter-group__options--shape">
          {% assign shape_list = options | split: ',' %}
          {% for shape in shape_list %}
            {% assign shape_value = shape | strip | downcase %}
            <label class="filter-shape">
              <input 
                type="checkbox" 
                name="filter_shape"
                value="{{ shape | strip }}"
                @change="updateFilter('shape', '{{ shape | strip }}', $event.target.checked)"
              >
              <span class="filter-shape__icon filter-shape__icon--{{ shape_value | replace: ' ', '-' }}">
                {% case shape_value %}
                  {% when 'rectangle' %}
                    <svg viewBox="0 0 40 30" fill="currentColor">
                      <rect width="40" height="30" rx="2"/>
                    </svg>
                  {% when 'round' %}
                    <svg viewBox="0 0 40 40" fill="currentColor">
                      <circle cx="20" cy="20" r="20"/>
                    </svg>
                  {% when 'runner' %}
                    <svg viewBox="0 0 40 15" fill="currentColor">
                      <rect width="40" height="15" rx="2"/>
                    </svg>
                  {% when 'square' %}
                    <svg viewBox="0 0 40 40" fill="currentColor">
                      <rect width="40" height="40" rx="2"/>
                    </svg>
                  {% when 'oval' %}
                    <svg viewBox="0 0 40 30" fill="currentColor">
                      <ellipse cx="20" cy="15" rx="20" ry="15"/>
                    </svg>
                  {% when 'hexagon' %}
                    <svg viewBox="0 0 40 40" fill="currentColor">
                      <polygon points="20,2 35,10 35,30 20,38 5,30 5,10"/>
                    </svg>
                {% endcase %}
              </span>
              <span class="filter-shape__name">{{ shape | strip }}</span>
            </label>
          {% endfor %}
        </div>
        
      {% when 'features' %}
        <div class="filter-group__options">
          {% assign feature_list = options | split: ',' %}
          {% for feature in feature_list %}
            <label class="filter-checkbox">
              <input 
                type="checkbox" 
                name="filter_features"
                value="{{ feature | strip }}"
                @change="updateFilter('features', '{{ feature | strip }}', $event.target.checked)"
              >
              <span class="filter-checkbox__label">{{ feature | strip }}</span>
            </label>
          {% endfor %}
        </div>
    {% endcase %}
  </div>
</div>

<style>
  /* Filter Group Styles */
  .filter-group {
    border-bottom: 1px solid var(--color-border);
    padding-bottom: var(--space-md);
    margin-bottom: var(--space-md);
  }

  .filter-group:last-child {
    border-bottom: none;
  }

  .filter-group__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: var(--space-sm) 0;
    background: none;
    border: none;
    cursor: pointer;
    text-align: left;
  }

  .filter-group__title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-text-primary);
  }

  .filter-group__arrow {
    width: 0.75rem;
    height: 0.75rem;
    color: var(--color-text-secondary);
    transition: var(--transition-base);
  }

  .filter-group__content {
    padding-top: var(--space-sm);
  }

  .filter-group__options {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }

  /* Checkbox Filters */
  .filter-checkbox {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    cursor: pointer;
  }

  .filter-checkbox input {
    width: 1.25rem;
    height: 1.25rem;
    cursor: pointer;
  }

  .filter-checkbox__label {
    font-size: 0.875rem;
    color: var(--color-text-primary);
  }

  /* Color Filters */
  .filter-group__options--color {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
    gap: var(--space-sm);
  }

  .filter-color {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-xs);
    cursor: pointer;
  }

  .filter-color input {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .filter-color__swatch {
    position: relative;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: var(--radius-full);
    transition: var(--transition-base);
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);
  }

  .filter-color input:checked + .filter-color__swatch {
    box-shadow: 0 0 0 2px var(--color-accent);
    transform: scale(1.1);
  }

  .filter-color__border {
    position: absolute;
    inset: 2px;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-full);
  }

  .filter-color__multi {
    position: absolute;
    inset: 0;
    background: linear-gradient(45deg, 
      #ff0000 0%, #ff0000 16.66%,
      #ff8800 16.66%, #ff8800 33.33%,
      #ffdd00 33.33%, #ffdd00 50%,
      #00dd00 50%, #00dd00 66.66%,
      #0099ff 66.66%, #0099ff 83.33%,
      #8800ff 83.33%, #8800ff 100%
    );
    border-radius: var(--radius-full);
  }

  .filter-color__name {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    text-align: center;
  }

  /* Price Filter */
  .filter-price__inputs {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    margin-bottom: var(--space-md);
  }

  .filter-price__input-group {
    position: relative;
    flex: 1;
  }

  .filter-price__currency {
    position: absolute;
    left: var(--space-sm);
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-text-secondary);
    font-size: 0.875rem;
  }

  .filter-price__input {
    width: 100%;
    padding-left: 1.5rem;
    font-size: 0.875rem;
  }

  .filter-price__separator {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
  }

  .filter-price__slider {
    position: relative;
    height: 2rem;
  }

  .filter-price__track {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    height: 4px;
    background-color: var(--color-border);
    border-radius: 2px;
  }

  .filter-price__range {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    height: 4px;
    background-color: var(--color-accent);
    border-radius: 2px;
  }

  .filter-price__range-input {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    height: 2rem;
    background: transparent;
    pointer-events: none;
    -webkit-appearance: none;
    appearance: none;
  }

  .filter-price__range-input::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 1rem;
    height: 1rem;
    background-color: var(--color-accent);
    border-radius: var(--radius-full);
    cursor: pointer;
    pointer-events: all;
  }

  /* Shape Filters */
  .filter-group__options--shape {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--space-sm);
  }

  .filter-shape {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-xs);
    cursor: pointer;
  }

  .filter-shape input {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .filter-shape__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    padding: 0.5rem;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    color: var(--color-text-secondary);
    transition: var(--transition-base);
  }

  .filter-shape input:checked + .filter-shape__icon {
    background-color: var(--color-accent-light);
    border-color: var(--color-accent);
    color: var(--color-accent);
  }

  .filter-shape__icon svg {
    width: 100%;
    height: 100%;
  }

  .filter-shape__name {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    text-align: center;
  }

  /* Custom Size */
  .filter-custom-size {
    margin-top: var(--space-sm);
    padding: var(--space-sm);
    background-color: var(--color-background-subtle);
    border-radius: var(--radius-md);
  }

  .filter-custom-size__inputs {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    margin-bottom: var(--space-xs);
  }

  .filter-custom-size__input {
    flex: 1;
    font-size: 0.875rem;
  }

  .filter-custom-size__separator {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
  }

  .filter-custom-size__unit {
    width: 100%;
    font-size: 0.875rem;
  }
</style>
