{% comment %}
  Announcement Bar Section
  Displays rotating messages with optional countdown timer
{% endcomment %}

{% if section.settings.enable %}
  <div 
    class="announcement-bar" 
    x-data="announcementBar()"
    x-init="init()"
    :class="{ 'announcement-bar--hidden': isClosed }"
    style="background-color: {{ section.settings.bg_color }}; color: {{ section.settings.text_color }};"
  >
    <div class="announcement-bar__container">
      <!-- Messages -->
      <div class="announcement-bar__messages">
        {% for block in section.blocks %}
          {% case block.type %}
            {% when 'message' %}
              <div 
                class="announcement-bar__message"
                x-show="currentMessage === {{ forloop.index0 }}"
                x-transition:enter="transition ease-out duration-300"
                x-transition:enter-start="opacity-0 transform translate-y-4"
                x-transition:enter-end="opacity-1 transform translate-y-0"
                x-transition:leave="transition ease-in duration-200"
                x-transition:leave-start="opacity-1"
                x-transition:leave-end="opacity-0"
              >
                {% if block.settings.link != blank %}
                  <a href="{{ block.settings.link }}" class="announcement-bar__link">
                {% endif %}
                
                <span class="announcement-bar__text">{{ block.settings.text }}</span>
                
                {% if block.settings.show_countdown and block.settings.countdown_date != blank %}
                  <span class="announcement-bar__countdown" x-text="getCountdown('{{ block.settings.countdown_date }}')"></span>
                {% endif %}
                
                {% if block.settings.link != blank %}
                  </a>
                {% endif %}
              </div>
          {% endcase %}
        {% endfor %}
      </div>
      
      <!-- Navigation -->
      {% if section.blocks.size > 1 and section.settings.show_navigation %}
        <div class="announcement-bar__nav">
          <button 
            @click="previousMessage()" 
            class="announcement-bar__nav-btn"
            aria-label="Previous announcement"
          >
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
              <path d="M10 12L6 8L10 4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
          
          <div class="announcement-bar__dots">
            {% for block in section.blocks %}
              <button 
                @click="currentMessage = {{ forloop.index0 }}"
                class="announcement-bar__dot"
                :class="{ 'announcement-bar__dot--active': currentMessage === {{ forloop.index0 }} }"
                aria-label="Go to announcement {{ forloop.index }}"
              ></button>
            {% endfor %}
          </div>
          
          <button 
            @click="nextMessage()" 
            class="announcement-bar__nav-btn"
            aria-label="Next announcement"
          >
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
              <path d="M6 12L10 8L6 4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
        </div>
      {% endif %}
      
      <!-- Close Button -->
      {% if section.settings.show_close %}
        <button 
          @click="closeBar()"
          class="announcement-bar__close"
          aria-label="Close announcement"
        >
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
          </svg>
        </button>
      {% endif %}
    </div>
  </div>
  
  <script>
    function announcementBar() {
      return {
        currentMessage: 0,
        totalMessages: {{ section.blocks.size }},
        isClosed: false,
        autoRotate: {{ section.settings.auto_rotate }},
        rotateInterval: {{ section.settings.rotate_interval | times: 1000 }},
        rotateTimer: null,
        
        init() {
          // Check if bar was previously closed
          const closedUntil = localStorage.getItem('announcementBarClosed');
          if (closedUntil && new Date(closedUntil) > new Date()) {
            this.isClosed = true;
            return;
          }
          
          // Start auto-rotation if enabled
          if (this.autoRotate && this.totalMessages > 1) {
            this.startRotation();
          }
        },
        
        startRotation() {
          this.rotateTimer = setInterval(() => {
            this.nextMessage();
          }, this.rotateInterval);
        },
        
        stopRotation() {
          if (this.rotateTimer) {
            clearInterval(this.rotateTimer);
            this.rotateTimer = null;
          }
        },
        
        nextMessage() {
          this.currentMessage = (this.currentMessage + 1) % this.totalMessages;
        },
        
        previousMessage() {
          this.currentMessage = this.currentMessage === 0 ? this.totalMessages - 1 : this.currentMessage - 1;
        },
        
        closeBar() {
          this.isClosed = true;
          // Store closed state for 24 hours
          const tomorrow = new Date();
          tomorrow.setDate(tomorrow.getDate() + 1);
          localStorage.setItem('announcementBarClosed', tomorrow.toISOString());
          this.stopRotation();
        },
        
        getCountdown(targetDate) {
          const target = new Date(targetDate);
          const now = new Date();
          const diff = target - now;
          
          if (diff <= 0) {
            return 'Expired';
          }
          
          const days = Math.floor(diff / (1000 * 60 * 60 * 24));
          const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
          const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
          
          if (days > 0) {
            return `${days}d ${hours}h ${minutes}m`;
          } else if (hours > 0) {
            return `${hours}h ${minutes}m`;
          } else {
            return `${minutes}m`;
          }
        }
      }
    }
  </script>
  
  <style>
    .announcement-bar {
      position: relative;
      padding: 12px 0;
      font-size: 14px;
      text-align: center;
      transition: all 0.3s ease;
      z-index: var(--z-index-announcement);
    }
    
    .announcement-bar--hidden {
      transform: translateY(-100%);
      opacity: 0;
      pointer-events: none;
    }
    
    .announcement-bar__container {
      max-width: var(--container-max-width);
      margin: 0 auto;
      padding: 0 var(--container-padding);
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--space-md);
      position: relative;
    }
    
    .announcement-bar__messages {
      flex: 1;
      position: relative;
      min-height: 20px;
    }
    
    .announcement-bar__message {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 100%;
    }
    
    .announcement-bar__link {
      color: inherit;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }
    
    .announcement-bar__link:hover {
      text-decoration: underline;
    }
    
    .announcement-bar__text {
      font-weight: 500;
    }
    
    .announcement-bar__countdown {
      display: inline-flex;
      align-items: center;
      gap: 4px;
      padding: 2px 8px;
      background: rgba(0, 0, 0, 0.1);
      border-radius: 4px;
      font-weight: 600;
      font-size: 13px;
    }
    
    /* Navigation */
    .announcement-bar__nav {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .announcement-bar__nav-btn {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: none;
      border: none;
      color: inherit;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.2s ease;
    }
    
    .announcement-bar__nav-btn:hover {
      opacity: 1;
    }
    
    .announcement-bar__dots {
      display: flex;
      gap: 6px;
    }
    
    .announcement-bar__dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background: currentColor;
      opacity: 0.3;
      border: none;
      cursor: pointer;
      transition: opacity 0.2s ease;
      padding: 0;
    }
    
    .announcement-bar__dot--active {
      opacity: 1;
    }
    
    /* Close Button */
    .announcement-bar__close {
      position: absolute;
      right: var(--container-padding);
      top: 50%;
      transform: translateY(-50%);
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: none;
      border: none;
      color: inherit;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.2s ease;
    }
    
    .announcement-bar__close:hover {
      opacity: 1;
    }
    
    /* Mobile */
    @media (max-width: 640px) {
      .announcement-bar {
        font-size: 13px;
      }
      
      .announcement-bar__container {
        padding: 0 16px;
      }
      
      .announcement-bar__nav {
        display: none;
      }
    }
  </style>
{% endif %}

{% schema %}
{
  "name": "Announcement Bar",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable",
      "label": "Enable announcement bar",
      "default": true
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background color",
      "default": "#2B2C25"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#FFFFFF"
    },
    {
      "type": "checkbox",
      "id": "auto_rotate",
      "label": "Auto-rotate messages",
      "default": true
    },
    {
      "type": "range",
      "id": "rotate_interval",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Rotation interval",
      "default": 5
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation dots",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_close",
      "label": "Show close button",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "message",
      "name": "Message",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "label": "Message text",
          "default": "Free shipping on orders over $150"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link"
        },
        {
          "type": "checkbox",
          "id": "show_countdown",
          "label": "Show countdown timer",
          "default": false
        },
        {
          "type": "text",
          "id": "countdown_date",
          "label": "Countdown end date",
          "info": "Format: YYYY-MM-DD HH:MM",
          "default": "2024-12-31 23:59"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Announcement Bar",
      "blocks": [
        {
          "type": "message",
          "settings": {
            "text": "Free shipping on orders over $150"
          }
        },
        {
          "type": "message",
          "settings": {
            "text": "Holiday Sale: 20% off all rugs",
            "show_countdown": true
          }
        }
      ]
    }
  ]
}
{% endschema %}
/* Force sync Thu Oct 16 10:20:59 EDT 2025 */
