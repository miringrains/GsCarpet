{% comment %}
  Premium Collection Page with Advanced Filtering
  Features: Sophisticated filters, beautiful product grid, and sorting options
{% endcomment %}

<div class="collection-page" x-data="collectionFilters()">
  <!-- Collection Header -->
  <div class="collection-header">
    <div class="container">
      <div class="collection-header__content">
        <h1 class="collection-header__title text-h1">{{ collection.title }}</h1>
        {% if collection.description != blank %}
          <div class="collection-header__description text-body-lg text-secondary">
            {{ collection.description }}
          </div>
        {% endif %}
      </div>
      
      {% if collection.image %}
        <div class="collection-header__image">
          {% render 'image',
            image: collection.image,
            width: 1920,
            height: 400,
            alt: collection.title,
            class: 'collection-header__img',
            data-parallax: '0.3'
          %}
        </div>
      {% endif %}
    </div>
  </div>

  <!-- Filter Bar -->
  <div class="collection-toolbar">
    <div class="container">
      <div class="collection-toolbar__inner">
        <div class="collection-toolbar__info">
          <span class="collection-toolbar__count">
            {{ collection.products_count }} 
            {% if collection.products_count == 1 %}product{% else %}products{% endif %}
          </span>
        </div>
        
        <div class="collection-toolbar__controls">
          <!-- Sort Dropdown -->
          <div class="collection-sort">
            <label for="sort-by" class="sr-only">Sort by</label>
            <select 
              id="sort-by" 
              name="sort_by"
              class="form-select"
              @change="updateSort($event.target.value)"
            >
              <option value="manual" {% if collection.sort_by == 'manual' %}selected{% endif %}>
                Featured
              </option>
              <option value="best-selling" {% if collection.sort_by == 'best-selling' %}selected{% endif %}>
                Best Selling
              </option>
              <option value="title-ascending" {% if collection.sort_by == 'title-ascending' %}selected{% endif %}>
                Name: A-Z
              </option>
              <option value="title-descending" {% if collection.sort_by == 'title-descending' %}selected{% endif %}>
                Name: Z-A
              </option>
              <option value="price-ascending" {% if collection.sort_by == 'price-ascending' %}selected{% endif %}>
                Price: Low to High
              </option>
              <option value="price-descending" {% if collection.sort_by == 'price-descending' %}selected{% endif %}>
                Price: High to Low
              </option>
              <option value="created-descending" {% if collection.sort_by == 'created-descending' %}selected{% endif %}>
                Newest
              </option>
            </select>
          </div>
          
          <!-- Filter Toggle -->
          <button 
            class="btn btn--secondary collection-toolbar__filter-btn"
            @click="filtersOpen = !filtersOpen"
            :aria-expanded="filtersOpen"
          >
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
              <path d="M5 10H15M2.5 5H17.5M7.5 15H12.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
            </svg>
            <span>Filters</span>
            <span 
              class="collection-toolbar__filter-count" 
              x-show="activeFilterCount > 0"
              x-text="activeFilterCount"
            ></span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="collection-content">
    <div class="container">
      <div class="collection-layout">
        <!-- Filters Sidebar -->
        <aside 
          class="collection-filters"
          :class="{ 'collection-filters--open': filtersOpen }"
        >
          <div class="collection-filters__header lg:hidden">
            <h3 class="collection-filters__title">Filters</h3>
            <button 
              @click="filtersOpen = false"
              class="collection-filters__close"
              aria-label="Close filters"
            >
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="1.5"/>
              </svg>
            </button>
          </div>

          <div class="collection-filters__content">
            <!-- Active Filters -->
            <div class="active-filters" x-show="activeFilterCount > 0">
              <div class="active-filters__header">
                <span class="active-filters__title">Active Filters</span>
                <button 
                  @click="clearAllFilters()"
                  class="active-filters__clear"
                >
                  Clear All
                </button>
              </div>
              <div class="active-filters__list">
                <template x-for="filter in activeFilters" :key="filter.id">
                  <button 
                    class="active-filter-pill"
                    @click="removeFilter(filter)"
                  >
                    <span x-text="filter.label"></span>
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                      <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" stroke-width="1.5"/>
                    </svg>
                  </button>
                </template>
              </div>
            </div>

            <!-- Filter Groups -->
            {% render 'collection-filter-group',
              title: 'Size',
              type: 'size',
              options: section.settings.size_options
            %}

            {% render 'collection-filter-group',
              title: 'Color',
              type: 'color',
              options: section.settings.color_options
            %}

            {% render 'collection-filter-group',
              title: 'Material',
              type: 'material',
              options: section.settings.material_options
            %}

            {% render 'collection-filter-group',
              title: 'Price',
              type: 'price',
              min: 0,
              max: 5000
            %}

            {% render 'collection-filter-group',
              title: 'Shape',
              type: 'shape',
              options: section.settings.shape_options
            %}

            {% render 'collection-filter-group',
              title: 'Features',
              type: 'features',
              options: section.settings.feature_options
            %}
          </div>

          <!-- Filter Actions (Mobile) -->
          <div class="collection-filters__actions lg:hidden">
            <button 
              @click="applyFilters()"
              class="btn btn--primary btn--large"
            >
              Apply Filters
            </button>
          </div>
        </aside>

        <!-- Products Grid -->
        <div class="collection-grid">
          {% paginate collection.products by section.settings.products_per_page %}
            <!-- Loading State -->
            <div 
              class="collection-loading"
              x-show="loading"
              x-transition
            >
              <div class="collection-loading__spinner"></div>
            </div>

            <!-- Product Grid -->
            <div 
              class="product-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3"
              x-show="!loading"
            >
              {% for product in collection.products %}
                <div 
                  class="product-card card"
                  data-animate="fade-up"
                  data-animate-delay="{{ forloop.index0 | times: 50 }}"
                >
                  <a href="{{ product.url }}" class="product-card__link">
                    <div class="product-card__image card__image">
                      {% if product.featured_image %}
                        {% render 'image',
                          image: product.featured_image,
                          width: 400,
                          height: 400,
                          crop: 'center',
                          alt: product.title,
                          class: 'product-card__img',
                          loading: 'lazy'
                        %}
                        
                        {% if product.images.size > 1 %}
                          {% render 'image',
                            image: product.images[1],
                            width: 400,
                            height: 400,
                            crop: 'center',
                            alt: product.title,
                            class: 'product-card__img product-card__img--hover',
                            loading: 'lazy'
                          %}
                        {% endif %}
                      {% else %}
                        <div class="product-card__placeholder">
                          {{ 'product-1' | placeholder_svg_tag }}
                        </div>
                      {% endif %}
                      
                      <!-- Quick Actions -->
                      <div class="product-card__actions">
                        <button 
                          class="product-card__action"
                          @click.prevent="quickView('{{ product.id }}')"
                          aria-label="Quick view"
                        >
                          <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                            <path d="M10 12C11.1046 12 12 11.1046 12 10C12 8.89543 11.1046 8 10 8C8.89543 8 8 8.89543 8 10C8 11.1046 8.89543 12 10 12Z" stroke="currentColor" stroke-width="1.5"/>
                            <path d="M18.3333 10C16.1109 14.4444 13.3333 16.6667 10 16.6667C6.66667 16.6667 3.88889 14.4444 1.66667 10C3.88889 5.55556 6.66667 3.33333 10 3.33333C13.3333 3.33333 16.1109 5.55556 18.3333 10Z" stroke="currentColor" stroke-width="1.5"/>
                          </svg>
                        </button>
                      </div>
                      
                      <!-- Badges -->
                      {% if product.available == false %}
                        <span class="badge product-card__badge product-card__badge--soldout">
                          Sold Out
                        </span>
                      {% elsif product.compare_at_price > product.price %}
                        <span class="badge product-card__badge product-card__badge--sale">
                          Sale
                        </span>
                      {% endif %}
                    </div>
                  </a>
                  
                  <div class="product-card__content card__content">
                    <!-- Material Badge -->
                    {% if product.metafields.custom.material %}
                      <span class="product-card__material badge">
                        {{ product.metafields.custom.material }}
                      </span>
                    {% endif %}
                    
                    <h3 class="product-card__title">
                      <a href="{{ product.url }}">{{ product.title }}</a>
                    </h3>
                    
                    <div class="product-card__price">
                      {% if product.compare_at_price > product.price %}
                        <span class="product-card__price--compare">
                          {{ product.compare_at_price | money }}
                        </span>
                      {% endif %}
                      <span class="product-card__price--current">
                        {% if product.price_varies %}From {% endif %}
                        {{ product.price | money }}
                      </span>
                    </div>
                    
                    <!-- Customize Button -->
                    <button 
                      class="btn btn--primary btn-magnetic product-card__customize"
                      @click="customizeProduct('{{ product.id }}')"
                    >
                      Customize Size
                    </button>
                  </div>
                </div>
              {% endfor %}
            </div>

            <!-- Pagination -->
            {% if paginate.pages > 1 %}
              <nav class="pagination" aria-label="Pagination">
                {{ paginate | default_pagination }}
              </nav>
            {% endif %}
          {% endpaginate %}
        </div>
      </div>
    </div>
  </div>

  <!-- Filter Overlay (Mobile) -->
  <div 
    class="collection-filters__overlay lg:hidden"
    x-show="filtersOpen"
    x-cloak
    x-transition:enter="transition ease-out duration-300"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-1"
    x-transition:leave="transition ease-in duration-200"
    x-transition:leave-start="opacity-1"
    x-transition:leave-end="opacity-0"
    @click="filtersOpen = false"
  ></div>
</div>

<script>
  function collectionFilters() {
    return {
      filtersOpen: false,
      loading: false,
      activeFilters: [],
      filters: {
        size: [],
        color: [],
        material: [],
        price: { min: null, max: null },
        shape: [],
        features: []
      },
      
      get activeFilterCount() {
        let count = 0;
        count += this.filters.size.length;
        count += this.filters.color.length;
        count += this.filters.material.length;
        count += this.filters.shape.length;
        count += this.filters.features.length;
        if (this.filters.price.min || this.filters.price.max) count++;
        return count;
      },
      
      updateSort(value) {
        const url = new URL(window.location);
        url.searchParams.set('sort_by', value);
        window.location = url;
      },
      
      applyFilters() {
        // In a real implementation, this would update the URL and reload products
        this.loading = true;
        setTimeout(() => {
          this.loading = false;
          this.filtersOpen = false;
        }, 500);
      },
      
      removeFilter(filter) {
        // Remove filter logic
        this.activeFilters = this.activeFilters.filter(f => f.id !== filter.id);
        this.applyFilters();
      },
      
      clearAllFilters() {
        this.filters = {
          size: [],
          color: [],
          material: [],
          price: { min: null, max: null },
          shape: [],
          features: []
        };
        this.activeFilters = [];
        this.applyFilters();
      },
      
      quickView(productId) {
        // Quick view implementation
        console.log('Quick view:', productId);
      },
      
      customizeProduct(productId) {
        // Open size customizer
        window.location.href = `/products/${productId}#customize`;
      },
      
      updateFilter(type, value, checked) {
        if (checked) {
          if (!this.filters[type].includes(value)) {
            this.filters[type].push(value);
            this.activeFilters.push({
              id: `${type}-${value}`,
              type: type,
              value: value,
              label: value
            });
          }
        } else {
          this.filters[type] = this.filters[type].filter(v => v !== value);
          this.activeFilters = this.activeFilters.filter(f => f.id !== `${type}-${value}`);
        }
        this.applyFilters();
      },
      
      updatePriceFilter(type, value) {
        this.filters.price[type] = value ? parseFloat(value) : null;
        
        // Update active filters
        const existingPriceFilter = this.activeFilters.find(f => f.type === 'price');
        if (this.filters.price.min || this.filters.price.max) {
          const label = `$${this.filters.price.min || 0} - $${this.filters.price.max || '∞'}`;
          if (existingPriceFilter) {
            existingPriceFilter.label = label;
          } else {
            this.activeFilters.push({
              id: 'price-range',
              type: 'price',
              label: label
            });
          }
        } else if (existingPriceFilter) {
          this.activeFilters = this.activeFilters.filter(f => f.type !== 'price');
        }
        
        this.applyFilters();
      },
      
      updateCustomSize(dimension, value) {
        // Handle custom size updates
        console.log('Custom size:', dimension, value);
      },
      
      get priceRangeLeft() {
        const min = {{ min | default: 0 }};
        const max = {{ max | default: 5000 }};
        const currentMin = this.filters.price.min || min;
        return ((currentMin - min) / (max - min)) * 100;
      },
      
      get priceRangeWidth() {
        const min = {{ min | default: 0 }};
        const max = {{ max | default: 5000 }};
        const currentMin = this.filters.price.min || min;
        const currentMax = this.filters.price.max || max;
        return ((currentMax - currentMin) / (max - min)) * 100;
      }
    }
  }
</script>

{% stylesheet %}
  /* Collection Page Styles */
  .collection-page {
    min-height: 100vh;
  }

  /* Collection Header */
  .collection-header {
    position: relative;
    padding: var(--space-2xl) 0 var(--space-xl);
    background-color: var(--color-background-subtle);
    overflow: hidden;
  }

  .collection-header__content {
    position: relative;
    z-index: 2;
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  .collection-header__title {
    margin-bottom: var(--space-sm);
  }

  .collection-header__description {
    max-width: 600px;
    margin: 0 auto;
  }

  .collection-header__image {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
    opacity: 0.1;
  }

  .collection-header__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Collection Toolbar */
  .collection-toolbar {
    position: sticky;
    top: 5rem;
    z-index: var(--z-sticky);
    background-color: var(--color-surface);
    border-bottom: 1px solid var(--color-border);
    padding: var(--space-sm) 0;
  }

  .collection-toolbar__inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: var(--space-md);
  }

  .collection-toolbar__count {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
  }

  .collection-toolbar__controls {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }

  .collection-toolbar__filter-btn {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
  }

  .collection-toolbar__filter-count {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 1.25rem;
    height: 1.25rem;
    padding: 0 0.25rem;
    background-color: var(--color-accent);
    color: var(--color-text-inverse);
    border-radius: var(--radius-full);
    font-size: 0.75rem;
    font-weight: 600;
  }

  /* Collection Layout */
  .collection-content {
    padding: var(--space-xl) 0;
  }

  .collection-layout {
    display: grid;
    grid-template-columns: 280px 1fr;
    gap: var(--space-xl);
  }

  /* Filters Sidebar */
  .collection-filters {
    position: sticky;
    top: calc(5rem + 57px + var(--space-md));
    height: fit-content;
    max-height: calc(100vh - 5rem - 57px - var(--space-lg));
    overflow-y: auto;
  }

  @media (max-width: 1023px) {
    .collection-layout {
      grid-template-columns: 1fr;
    }

    .collection-filters {
      position: fixed;
      top: 0;
      left: 0;
      bottom: 0;
      width: 100%;
      max-width: 400px;
      background-color: var(--color-surface);
      transform: translateX(-100%);
      transition: transform 0.3s ease;
      z-index: var(--z-modal);
      display: flex;
      flex-direction: column;
    }

    .collection-filters--open {
      transform: translateX(0);
    }
  }

  .collection-filters__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--space-md);
    border-bottom: 1px solid var(--color-border);
  }

  .collection-filters__title {
    font-size: 1.25rem;
    font-weight: 600;
  }

  .collection-filters__close {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    padding: 0;
    background: none;
    border: none;
    cursor: pointer;
  }

  .collection-filters__content {
    flex: 1;
    overflow-y: auto;
    padding: var(--space-md);
  }

  .collection-filters__actions {
    padding: var(--space-md);
    border-top: 1px solid var(--color-border);
  }

  .collection-filters__overlay {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: var(--z-modal-backdrop);
  }

  /* Active Filters */
  .active-filters {
    margin-bottom: var(--space-lg);
    padding-bottom: var(--space-md);
    border-bottom: 1px solid var(--color-border);
  }

  .active-filters__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-sm);
  }

  .active-filters__title {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--color-text-secondary);
  }

  .active-filters__clear {
    font-size: 0.875rem;
    color: var(--color-accent);
    background: none;
    border: none;
    cursor: pointer;
    text-decoration: underline;
  }

  .active-filters__list {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
  }

  .active-filter-pill {
    display: inline-flex;
    align-items: center;
    gap: var(--space-xs);
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
    background-color: var(--color-accent-light);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-full);
    cursor: pointer;
    transition: var(--transition-base);
  }

  .active-filter-pill:hover {
    background-color: var(--color-background-subtle);
  }

  .active-filter-pill svg {
    width: 0.875rem;
    height: 0.875rem;
  }

  /* Product Grid */
  .collection-grid {
    position: relative;
  }

  .collection-loading {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(255, 255, 255, 0.8);
    z-index: 10;
  }

  .collection-loading__spinner {
    width: 3rem;
    height: 3rem;
    border: 3px solid var(--color-border);
    border-top-color: var(--color-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  /* Product Card */
  .product-card {
    position: relative;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .product-card__link {
    display: block;
    text-decoration: none;
    color: inherit;
  }

  .product-card__image {
    position: relative;
    overflow: hidden;
    background-color: var(--color-background-subtle);
  }

  .product-card__img {
    transition: var(--transition-slow);
  }

  .product-card__img--hover {
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
  }

  .product-card:hover .product-card__img {
    transform: scale(1.05);
  }

  .product-card:hover .product-card__img--hover {
    opacity: 1;
  }

  .product-card__placeholder {
    padding-bottom: 100%;
  }

  .product-card__actions {
    position: absolute;
    top: var(--space-sm);
    right: var(--space-sm);
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
    opacity: 0;
    transition: var(--transition-base);
  }

  .product-card:hover .product-card__actions {
    opacity: 1;
  }

  .product-card__action {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    background-color: var(--color-surface);
    border: none;
    border-radius: var(--radius-full);
    box-shadow: var(--shadow-md);
    cursor: pointer;
    transition: var(--transition-base);
  }

  .product-card__action:hover {
    transform: scale(1.1);
    box-shadow: var(--shadow-lg);
  }

  .product-card__badge {
    position: absolute;
    top: var(--space-sm);
    left: var(--space-sm);
    z-index: 2;
  }

  .product-card__badge--soldout {
    background-color: var(--color-text-tertiary);
    color: var(--color-text-inverse);
  }

  .product-card__badge--sale {
    background-color: var(--color-error);
    color: var(--color-text-inverse);
  }

  .product-card__content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .product-card__material {
    align-self: flex-start;
  }

  .product-card__title {
    font-size: 1.125rem;
    font-weight: 500;
    margin: 0;
  }

  .product-card__title a {
    color: var(--color-text-primary);
    text-decoration: none;
  }

  .product-card__title a:hover {
    color: var(--color-accent);
  }

  .product-card__price {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    margin-top: auto;
  }

  .product-card__price--compare {
    font-size: 0.875rem;
    color: var(--color-text-tertiary);
    text-decoration: line-through;
  }

  .product-card__price--current {
    font-size: 1.125rem;
    font-weight: 600;
  }

  .product-card__customize {
    margin-top: var(--space-sm);
  }

  /* Pagination */
  .pagination {
    margin-top: var(--space-2xl);
    text-align: center;
  }

  .pagination a,
  .pagination span {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 2.5rem;
    height: 2.5rem;
    padding: 0 0.75rem;
    margin: 0 0.25rem;
    font-size: 0.875rem;
    color: var(--color-text-primary);
    text-decoration: none;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    transition: var(--transition-base);
  }

  .pagination a:hover {
    background-color: var(--color-accent-light);
    border-color: var(--color-accent);
  }

  .pagination span.current {
    background-color: var(--color-accent);
    color: var(--color-text-inverse);
    border-color: var(--color-accent);
  }

  .pagination span.disabled {
    color: var(--color-text-tertiary);
    cursor: not-allowed;
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:general.collection",
  "settings": [
    {
      "type": "range",
      "id": "products_per_page",
      "min": 12,
      "max": 48,
      "step": 6,
      "default": 24,
      "label": "Products per page"
    },
    {
      "type": "header",
      "content": "Filter Options"
    },
    {
      "type": "text",
      "id": "size_options",
      "label": "Size Options",
      "default": "4x6,5x7,6x9,8x10,9x12,10x14,12x15,Custom",
      "info": "Comma-separated list of size options"
    },
    {
      "type": "text",
      "id": "color_options",
      "label": "Color Options",
      "default": "Beige,Black,Blue,Brown,Gray,Green,Ivory,Multi,Orange,Pink,Red,White",
      "info": "Comma-separated list of color options"
    },
    {
      "type": "text",
      "id": "material_options",
      "label": "Material Options",
      "default": "Wool,Jute,Sisal,Cotton,Synthetic,Silk,Bamboo,Seagrass",
      "info": "Comma-separated list of material options"
    },
    {
      "type": "text",
      "id": "shape_options",
      "label": "Shape Options",
      "default": "Rectangle,Round,Runner,Square,Oval,Hexagon",
      "info": "Comma-separated list of shape options"
    },
    {
      "type": "text",
      "id": "feature_options",
      "label": "Feature Options",
      "default": "Stain Resistant,Pet Friendly,Machine Washable,Outdoor Safe,Non-Slip,Reversible",
      "info": "Comma-separated list of feature options"
    }
  ]
}
{% endschema %}
